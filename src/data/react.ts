import type { Question } from "./interfaces";

export const reactQuestions:Question[] = [{"question": "1.   What is React?", "answer": "\nReact(aka React.js or ReactJS) is an **open-source front-end JavaScript library** that is used for building composable user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps based on components in a declarative approach.\n\nReact was created by [Jordan Walke](https://github.com/jordwalke), a software engineer working for Facebook. React was first deployed on Facebook's News Feed in 2011 and on Instagram in 2012.\n\n\n", "code": ""}, {"question": "2.  What is the history behind React evolution?", "answer": "The history of ReactJS started in 2010 with the creation of **XHP**. XHP is a PHP extension which improved the syntax of the language such that XML document fragments become valid PHP expressions and the primary purpose was used to create custom and reusable HTML elements.\n\nThe main principle of this extension was to make front-end code easier to understand and to help avoid cross-site scripting attacks. The project was successful to prevent the malicious content submitted by the scrubbing user.\n\nBut there was a different problem with XHP in which dynamic web applications require many roundtrips to the server, and XHP did not solve this problem. Also, the whole UI was re-rendered for small change in the application. Later, the initial prototype of React is created with the name **FaxJ** by Jordan inspired from XHP. Finally after sometime React has been introduced as a new library into JavaScript world.\n\n**Note:** JSX comes from the idea of XHP\n\n\n", "code": ""}, {"question": "2.   What are the major features of React?", "answer": "\nThe major features of React are:\n\n- Uses **JSX** syntax, a syntax extension of JS that allows developers to write HTML in their JS code.\n- It uses **Virtual DOM** instead of Real DOM considering that Real DOM manipulations are expensive.\n- Supports **server-side rendering** which is useful for Search Engine Optimizations(SEO).\n- Follows **Unidirectional or one-way** data flow or data binding.\n- Uses **reusable/composable** UI components to develop the view.\n\n\n", "code": ""}, {"question": "3.   What is JSX?", "answer": "\n_JSX_ stands for _JavaScript XML_ and it is an XML-like syntax extension to ECMAScript. Basically it just provides the syntactic sugar for the `React.createElement(type, props, ...children)` function, giving us expressiveness of JavaScript along with HTML like template syntax.\n\nIn the example below, the text inside `<h1>` tag is returned as JavaScript function to the render function.\n\nIf you don't use JSX syntax then the respective JavaScript code should be written as below,\n\n\n<details><summary><b>See Class</b></summary>\n<p>\n\n\n</p>\n</details>\n\n**Note:** JSX is stricter than HTML\n\n\n", "code": "export default function App() (\nreturn (\n<h1 className=\"greeting\">(\"Hello, this is a JSX Code!\")</h1>\n);\n)\nimport ( createElement ) from 'react';\n\nexport default function App() (\nreturn createElement(\n'h1',\n( className: 'greeting' ),\n'Hello, this is a JSX Code!'\n);\n)\nclass App extends React.Component (\nrender() (\nreturn (\n<h1 className=\"greeting\">(\"Hello, this is a JSX Code!\")</h1>\n);\n)\n)\n"}, {"question": "4.   What is the difference between Element and Component?", "answer": "\nAn _Element_ is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. _Elements_ can contain other _Elements_ in their props. Creating a React element is cheap. Once an element is created, it cannot be mutated.\n\nThe JavaScript representation(Without JSX) of React Element would be as follows:\n\nand this element can be simiplified using JSX\n\n\nThe above `React.createElement()` function returns an object as below:\n\n\nFinally, this element renders to the DOM using `ReactDOM.render()`.\n\nWhereas a **component** can be declared in several different ways. It can be a class with a `render()` method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:\n\n\nThen JSX gets transpiled to a `React.createElement()` function tree:\n\n\n\n", "code": "const element = React.createElement(\"div\", ( id: \"login-btn\" ), \"Login\");\n<div id=\"login-btn\">Login</div>\n(\ntype: 'div',\nprops: (\nchildren: 'Login',\nid: 'login-btn'\n)\n)\nconst Button = (( handleLogin )) => (\n<div id=(\"login-btn\") onClick=(handleLogin)>\nLogin\n</div>\n);\nconst Button = (( handleLogin )) =>\nReact.createElement(\n\"div\",\n( id: \"login-btn\", onClick: handleLogin ),\n\"Login\"\n);\n"}, {"question": "5.   How to create components in React?", "answer": "\nComponents are the building blocks of creating User Interfaces(UI) in React. There are two possible ways to create a component.\n\n1. **Function Components:** This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the first parameter and return React elements to render the output:\n\n\n2. **Class Components:** You can also use ES6 class to define a component. The above function component can be written as a class component:\n\n\n\n", "code": "function Greeting(( message )) (\nreturn <h1>(`Hello, $(message)`)</h1>;\n)\nclass Greeting extends React.Component (\nrender() (\nreturn <h1>(`Hello, $(this.props.message)`)</h1>;\n)\n)\n"}, {"question": "6.   When to use a Class Component over a Function Component?", "answer": "\nAfter the addition of Hooks(i.e. React 16.8 onwards) it is always recommended to use Function components over Class components  in React. Because you could use state, lifecycle methods and other features that were only available in class component present in function component too.\n\nBut even there are two reasons to use Class components over Function components.\n\n1. If you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries.\n2. In older versions, If the component needs _state or lifecycle methods_ then you need to use class component.\n\n\n**Note:** You can also use reusable [react error boundary](https://github.com/bvaughn/react-error-boundary) third-party component without writing any class. i.e, No need to use class components for Error boundaries.\n\nThe usage of Error boundaries from the above library is quite straight forward.\n\n\n\n", "code": "\"use client\";\n\nimport ( ErrorBoundary ) from \"react-error-boundary\";\n\n<ErrorBoundary fallback=(<div>Something went wrong</div>)>\n<ExampleApplication />\n</ErrorBoundary>\n"}, {"question": "7.   What are Pure Components?", "answer": "\nPure components are the components which render the same output for the same state and props. In function components, you can achieve these pure components through memoized `React.memo()` API wrapping around the component. This API prevents unnecessary re-renders by comparing the previous props and new props using shallow comparison. So it will be helpful for performance optimizations.\n\nBut at the same time, it won't compare the previous state with the current state because function component itself prevents the unnecessary rendering by default when you set the same state again.\n\nThe syntactic representation of memoized components looks like below,\n\n\nBelow is the example of how child component(i.e., EmployeeProfile) prevents re-renders for the same props passed by parent component(i.e.,EmployeeRegForm).\n\nIn the above code, the email prop has not been passed to child component. So there won't be any re-renders for email prop change.\n\nIn class components, the components extending _`React.PureComponent`_ instead of  _`React.Component`_ become the pure components. When props or state changes, _PureComponent_ will do a shallow comparison on both props and state by invoking `shouldComponentUpdate()` lifecycle method.\n\n**Note:** `React.memo()` is a higher-order component.\n\n\n", "code": "const MemoizedComponent = memo(SomeComponent, arePropsEqual?);\nimport ( memo, useState ) from 'react';\n\nconst EmployeeProfile = memo(function EmployeeProfile(( name, email )) (\nreturn (<>\n<p>Name:(name)</p>\n<p>Email: (email)</p>\n</>);\n));\nexport default function EmployeeRegForm() (\nconst [name, setName] = useState('');\nconst [email, setEmail] = useState('');\nreturn (\n<>\n<label>\nName: <input value=(name) onChange=(e => setName(e.target.value)) />\n</label>\n<label>\nEmail: <input value=(email) onChange=(e => setEmail(e.target.value)) />\n</label>\n<hr/>\n<EmployeeProfile name=(name)/>\n</>\n);\n)\n"}, {"question": "8.   What is state in React?", "answer": "\n_State_ of a component is an object that holds some information that may change over the lifetime of the component. The important point is whenever the state object changes, the component re-renders. It is always recommended to make our state as simple as possible and minimize the number of stateful components.\n\n![state](images/state.jpg)\n\nLet's take an example of **User** component with message state. Here, **useState** hook has been used to add state to the User component and it returns an array with current state and function to update it.\n\n\n<details><summary><b>See Class</b></summary>\n<p>\n\n\n</p>\n</details>\n\nState is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.\n\n\n", "code": "import React, ( useState ) from \"react\";\n\nfunction User() (\nconst [message, setMessage] = useState(\"Welcome to React world\");\n\nreturn (\n<div>\n<h1>(message)</h1>\n</div>\n);\n)\nimport React from 'react';\nclass User extends React.Component (\nconstructor(props) (\nsuper(props);\n\nthis.state = (\nmessage: \"Welcome to React world\",\n);\n)\n\nrender() (\nreturn (\n<div>\n<h1>(this.state.message)</h1>\n</div>\n);\n)\n)\n"}, {"question": "9.   What are props in React?", "answer": "\n_Props_ are inputs to components. They are single values or objects containing a set of values that are passed to components on creation similar to HTML-tag attributes. Here, the data is passed down from a parent component to a child component.\n\nThe primary purpose of props in React is to provide following component functionality:\n\n1. Pass custom data to your component.\n2. Trigger state changes.\n3. Use via `this.props.reactProp` inside component's `render()` method.\n\nFor example, let us create an element with `reactProp` property:\n\n\nThis `reactProp` (or whatever you came up with) attribute name then becomes a property attached to React's native props object which originally already exists on all components created using React library.\n\n\nFor example, the usage of props in function component looks like below:\n\n\nThe properties from props object can be accessed directly using destructing feature from ES6 (ECMAScript 2015). The above child component can be simplified like below.\n\n\n<details><summary><b>See Class</b></summary>\nThe Props accessed in Class Based Component as below\n\n</details>\n\n\n", "code": "<Element reactProp=(\"1\") />\nprops.reactProp\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst ChildComponent = (props) => (\nreturn (\n<div>\n<p>(props.name)</p>\n<p>(props.age)</p>\n</div>\n);\n);\n\nconst ParentComponent = () => (\nreturn (\n<div>\n<ChildComponent name=\"John\" age=\"30\" />\n<ChildComponent name=\"Mary\" age=\"25\" />\n</div>\n);\n);\nconst ChildComponent = ((name, age)) => (\nreturn (\n<div>\n<p>(name)</p>\n<p>(age)</p>\n</div>\n);\n);\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass ChildComponent extends React.Component (\nrender() (\nreturn (\n<div>\n<p>(this.props.name)</p>\n<p>(this.props.age)</p>\n</div>\n);\n)\n)\n\nclass ParentComponent extends React.Component (\nrender() (\nreturn (\n<div>\n<ChildComponent name=\"John\" age=\"30\" />\n<ChildComponent name=\"Mary\" age=\"25\" />\n</div>\n);\n)\n)\n"}, {"question": "10.  What is the difference between state and props?", "answer": "\nIn React, both `state` and `props` are plain JavaScript objects and used to manage the data of a component, but they are used in different ways and have different characteristics.\n`state` is managed by the component itself and can be updated using the `setState()` function. Unlike props, state can be modified by the component and is used to manage the internal state of the component. Changes in the state trigger a re-render of the component and its children.\n`props` (short for \"properties\") are passed to a component by its parent component and are `read-only`, meaning that they cannot be modified by the component itself. props can be used to configure the behavior of a component and to pass data between components.\n\n\n", "code": ""}, {"question": "11.  Why should we not update the state directly?", "answer": "\nIf you try to update the state directly then it won't re-render the component.\n\n\nInstead use `setState()` method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.\n\n\n**Note:** You can directly assign to the state object either in _constructor_ or using latest javascript's class field declaration syntax.\n\n\n", "code": "//Wrong\nthis.state.message = \"Hello world\";\n//Correct\nthis.setState(( message: \"Hello World\" ));\n"}, {"question": "12.  What is the purpose of callback function as an argument of `setState()`?", "answer": "\nThe callback function is invoked when setState finished and the component gets rendered. Since `setState()` is **asynchronous** the callback function is used for any post action.\n\n**Note:** It is recommended to use lifecycle method rather than this callback function.\n\n\n\n", "code": "setState(( name: \"John\" ), () =>\nconsole.log(\"The name has updated and component re-rendered\")\n);\n"}, {"question": "13.  What is the difference between HTML and React event handling?", "answer": "\nBelow are some of the main differences between HTML and React event handling,\n\n1. In HTML, the event name usually represents in _lowercase_ as a convention:\n\n\nWhereas in React it follows _camelCase_ convention:\n\n\n2. In HTML, you can return `false` to prevent default behavior:\n\n\nWhereas in React you must call `preventDefault()` explicitly:\n\n\n3. In HTML, you need to invoke the function by appending `()`\nWhereas in react you should not append `()` with the function name. (refer \"activateLasers\" function in the first point for example)\n\n\n", "code": "<button onclick=\"activateLasers()\"></button>\n<button onClick=(activateLasers)>\n<a\nhref=\"#\"\nonclick='console.log(\"The link was clicked.\"); return false;'\n/>\nfunction handleClick(event) (\nevent.preventDefault();\nconsole.log(\"The link was clicked.\");\n)\n"}, {"question": "14.  How to bind methods or event handlers in JSX callbacks?", "answer": "\nThere are 3 possible ways to achieve this in class components:\n\n1. **Binding in Constructor:** In JavaScript classes, the methods are not bound by default. The same rule applies for React event handlers defined as class methods. Normally we bind them in constructor.\n\n\n2. **Public class fields syntax:** If you don't like to use bind approach then _public class fields syntax_ can be used to correctly bind callbacks. The Create React App eanables this syntax by default.\n\n\n\n3. **Arrow functions in callbacks:** It is possible to use _arrow functions_ directly in the callbacks.\n\n\n**Note:** If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with `.bind()` or _public class fields syntax_ approach considering performance.\n\n\n", "code": "class User extends Component (\nconstructor(props) (\nsuper(props);\nthis.handleClick = this.handleClick.bind(this);\n)\nhandleClick() (\nconsole.log(\"SingOut triggered\");\n)\nrender() (\nreturn <button onClick=(this.handleClick)>SingOut</button>;\n)\n)\nhandleClick = () => (\nconsole.log(\"SingOut triggered\", this);\n);\n<button onClick=(this.handleClick)>SingOut</button>\nhandleClick() (\nconsole.log('SingOut triggered');\n)\nrender() (\nreturn <button onClick=(() => this.handleClick())>SignOut</button>;\n)\n"}, {"question": "15.  How to pass a parameter to an event handler or callback?", "answer": "\nYou can use an _arrow function_ to wrap around an _event handler_ and pass parameters:\n\n\nThis is an equivalent to calling `.bind`:\n\n\nApart from these two approaches, you can also pass arguments to a function which is defined as arrow function\n\n\n\n", "code": "<button onClick=(() => this.handleClick(id)) />\n<button onClick=(this.handleClick.bind(this, id)) />\n<button onClick=(this.handleClick(id)) />;\nhandleClick = (id) => () => (\nconsole.log(\"Hello, your ticket number is\", id);\n);\n"}, {"question": "16.  What are synthetic events in React?", "answer": "\n`SyntheticEvent` is a cross-browser wrapper around the browser's native event. Its API is same as the browser's native event, including `stopPropagation()` and `preventDefault()`, except the events work identically across all browsers. The native events can be accessed directly from synthetic events using `nativeEvent` attribute.\n\nLet's take an example of BookStore title search component with the ability to get all native event properties\n\n\n\n", "code": "function BookStore() (\nhandleTitleChange(e) (\nconsole.log('The new title is:', e.target.value);\n// 'e' represents synthetic event\nconst nativeEvent = e.nativeEvent;\nconsole.log(nativeEvent);\ne.stopPropogation();\ne.preventDefault();\n)\n\nreturn <input name=\"title\" onChange=(handleTitleChange) />\n)\n"}, {"question": "17.  What are inline conditional expressions?", "answer": "\nYou can use either _if statements_ or _ternary expressions_ which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator `&&`.\n\n\n\n", "code": "<h1>Hello!</h1>;\n(\nmessages.length > 0 && !isLogin ? (\n<h2>You have (messages.length) unread messages.</h2>\n) : (\n<h2>You don't have unread messages.</h2>\n);\n)\n"}, {"question": "18.  What is \"key\" prop and what is the benefit of using it in arrays of elements?", "answer": "\nA `key` is a special attribute you **should** include when mapping over arrays to render data. _Key_ prop helps React identify which items have changed, are added, or are removed.\n\nKeys should be unique among its siblings. Most often we use ID from our data as _key_:\n\n\nWhen you don't have stable IDs for rendered items, you may use the item _index_ as a _key_ as a last resort:\n\n\n**Note:**\n\n1. Using _indexes_ for _keys_ is **not recommended** if the order of items may change. This can negatively impact performance and may cause issues with component state.\n2. If you extract list item as separate component then apply _keys_ on list component instead of `li` tag.\n3. There will be a warning message in the console if the `key` prop is not present on list items.\n4. The key attribute accepts either string or number and internally convert it as string type.\n\n\n", "code": "const todoItems = todos.map((todo) => <li key=(todo.id)>(todo.text)</li>);\nconst todoItems = todos.map((todo, index) => (\n<li key=(index)>(todo.text)</li>\n));\n"}, {"question": "19.  What is the use of refs?", "answer": "\nThe _ref_ is used to return a reference to the element. They _should be avoided_ in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.\n\n\n", "code": ""}, {"question": "20.  How to create refs?", "answer": "\nThere are two approaches\n\n1. This is a recently added approach. _Refs_ are created using `React.createRef()` method and attached to React elements via the `ref` attribute. In order to use _refs_ throughout the component, just assign the _ref_ to the instance property within constructor.\n\n\n2. You can also use ref callbacks approach regardless of React version. For example, the search bar component's input element is accessed as follows,\n\nYou can also use _refs_ in function components using **closures**.\n**Note**: You can also use inline ref callbacks even though it is not a recommended approach.\n\n\n", "code": "class MyComponent extends React.Component (\nconstructor(props) (\nsuper(props);\nthis.myRef = React.createRef();\n)\nrender() (\nreturn <div ref=(this.myRef) />;\n)\n)\nclass SearchBar extends Component (\nconstructor(props) (\nsuper(props);\nthis.txtSearch = null;\nthis.state = ( term: \"\" );\nthis.setInputSearchRef = (e) => (\nthis.txtSearch = e;\n);\n)\nonInputChange(event) (\nthis.setState(( term: this.txtSearch.value ));\n)\nrender() (\nreturn (\n<input\nvalue=(this.state.term)\nonChange=(this.onInputChange.bind(this))\nref=(this.setInputSearchRef)\n/>\n);\n)\n)\n"}, {"question": "21.  What are forward refs?", "answer": "\n_Ref forwarding_ is a feature that lets some components take a _ref_ they receive, and pass it further down to a child.\n\n\n\n", "code": "const ButtonElement = React.forwardRef((props, ref) => (\n<button ref=(ref) className=\"CustomButton\">\n(props.children)\n</button>\n));\n\n// Create ref to the DOM button:\nconst ref = React.createRef();\n<ButtonElement ref=(ref)>(\"Forward Ref\")</ButtonElement>;\n"}, {"question": "22.  Which is preferred option with in callback refs and findDOMNode()?", "answer": "\nIt is preferred to use _callback refs_ over `findDOMNode()` API. Because `findDOMNode()` prevents certain improvements in React in the future.\n\nThe **legacy** approach of using `findDOMNode`:\n\n\nThe recommended approach is:\n\n\n\n", "code": "class MyComponent extends Component (\ncomponentDidMount() (\nfindDOMNode(this).scrollIntoView();\n)\n\nrender() (\nreturn <div />;\n)\n)\nclass MyComponent extends Component (\nconstructor(props) (\nsuper(props);\nthis.node = createRef();\n)\ncomponentDidMount() (\nthis.node.current.scrollIntoView();\n)\n\nrender() (\nreturn <div ref=(this.node) />;\n)\n)\n"}, {"question": "23.  Why are String Refs legacy?", "answer": "\nIf you worked with React before, you might be familiar with an older API where the `ref` attribute is a string, like `ref=('textInput')`, and the DOM node is accessed as `this.refs.textInput`. We advise against it because _string refs have below issues_, and are considered legacy. String refs were **removed in React v16**.\n\n1. They _force React to keep track of currently executing component_. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.\n2. They are _not composable_ \u2014 if a library puts a ref on the passed child, the user can't put another ref on it. Callback refs are perfectly composable.\n3. They _don't work with static analysis_ like Flow. Flow can't guess the magic that framework does to make the string ref appear on `this.refs`, as well as its type (which could be different). Callback refs are friendlier to static analysis.\n4. It doesn't work as most people would expect with the \"render callback\" pattern (e.g. <DataGrid renderRow=(this.renderRow) />)\n\n\n\n", "code": "class MyComponent extends Component (\nrenderRow = (index) => (\n// This won't work. Ref will get attached to DataTable rather than MyComponent:\nreturn <input ref=(\"input-\" + index) />;\n\n// This would work though! Callback refs are awesome.\nreturn <input ref=((input) => (this[\"input-\" + index] = input)) />;\n);\n\nrender() (\nreturn (\n<DataTable data=(this.props.data) renderRow=(this.renderRow) />\n);\n)\n)\n"}, {"question": "24.  What is Virtual DOM?", "answer": "\nThe _Virtual DOM_ (VDOM) is an in-memory representation of _Real DOM_. The representation of a UI is kept in memory and synced with the \"real\" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called _reconciliation_.\n\n\n", "code": ""}, {"question": "25.  How Virtual DOM works?", "answer": "\nThe _Virtual DOM_ works in three simple steps.\n\n1. Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.\n\n![vdom](images/vdom1.png)\n\n2. Then the difference between the previous DOM representation and the new one is calculated.\n\n![vdom2](images/vdom2.png)\n\n3. Once the calculations are done, the real DOM will be updated with only the things that have actually changed.\n\n![vdom3](images/vdom3.png)\n\n\n", "code": ""}, {"question": "26.  What is the difference between Shadow DOM and Virtual DOM?", "answer": "\nThe _Shadow DOM_ is a browser technology designed primarily for scoping variables and CSS in _web components_. The _Virtual DOM_ is a concept implemented by libraries in JavaScript on top of browser APIs.\n\n\n", "code": ""}, {"question": "27.  What is React Fiber?", "answer": "\nFiber is the new _reconciliation_ engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.\n\n\n", "code": ""}, {"question": "28.  What is the main goal of React Fiber?", "answer": "\nThe goal of _React Fiber_ is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is **incremental rendering**: the ability to split rendering work into chunks and spread it out over multiple frames.\n\n_from documentation_\n\nIts main goals are:\n\n1. Ability to split interruptible work in chunks.\n2. Ability to prioritize, rebase and reuse work in progress.\n3. Ability to yield back and forth between parents and children to support layout in React.\n4. Ability to return multiple elements from render().\n5. Better support for error boundaries.\n\n\n", "code": ""}, {"question": "29.  What are controlled components?", "answer": "\nA component that controls the input elements within the forms on subsequent user input is called **Controlled Component**, i.e, every state mutation will have an associated handler function.\n\nFor example, to write all the names in uppercase letters, we use handleChange as below,\n\n\n\n", "code": "handleChange(event) (\nthis.setState((value: event.target.value.toUpperCase()))\n)\n"}, {"question": "30.  What are uncontrolled components?", "answer": "\nThe **Uncontrolled Components** are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.\n\nIn the below UserProfile component, the `name` input is accessed using ref.\n\n\nIn most cases, it's recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.\n\n\n", "code": "class UserProfile extends React.Component (\nconstructor(props) (\nsuper(props);\nthis.handleSubmit = this.handleSubmit.bind(this);\nthis.input = React.createRef();\n)\n\nhandleSubmit(event) (\nalert(\"A name was submitted: \" + this.input.current.value);\nevent.preventDefault();\n)\n\nrender() (\nreturn (\n<form onSubmit=(this.handleSubmit)>\n<label>\n(\"Name:\")\n<input type=\"text\" ref=(this.input) />\n</label>\n<input type=\"submit\" value=\"Submit\" />\n</form>\n);\n)\n)\n"}, {"question": "31.  What is the difference between createElement and cloneElement?", "answer": "\nJSX elements will be transpiled to `React.createElement()` functions to create React elements which are going to be used for the object representation of UI. Whereas `cloneElement` is used to clone an element and pass it new props.\n\n\n", "code": ""}, {"question": "32.  What is Lifting State Up in React?", "answer": "\nWhen several components need to share the same changing data then it is recommended to _lift the shared state up_ to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.\n\n\n", "code": ""}, {"question": "33.  What are the different phases of component lifecycle?", "answer": "\nThe component lifecycle has three distinct lifecycle phases:\n\n1. **Mounting:** The component is ready to mount in the browser DOM. This phase covers initialization from `constructor()`, `getDerivedStateFromProps()`, `render()`, and `componentDidMount()` lifecycle methods.\n\n2. **Updating:** In this phase, the component gets updated in two ways, sending the new props and updating the state either from `setState()` or `forceUpdate()`. This phase covers `getDerivedStateFromProps()`, `shouldComponentUpdate()`, `render()`, `getSnapshotBeforeUpdate()` and `componentDidUpdate()` lifecycle methods.\n\n3. **Unmounting:** In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes `componentWillUnmount()` lifecycle method.\n\nIt's worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows\n\n1. **Render** The component will render without any side effects. This applies to Pure components and in this phase, React can pause, abort, or restart the render.\n\n2. **Pre-commit** Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the `getSnapshotBeforeUpdate()`.\n\n3. **Commit** React works with the DOM and executes the final lifecycles respectively `componentDidMount()` for mounting, `componentDidUpdate()` for updating, and `componentWillUnmount()` for unmounting.\n\nReact 16.3+ Phases (or an [interactive version](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/))\n\n![phases 16.4+](images/phases16.4.png)\n\nBefore React 16.3\n\n![phases 16.2](images/phases.png)\n\n\n", "code": ""}, {"question": "34.  What are the lifecycle methods of React?", "answer": "\nBefore React 16.3\n\n- **componentWillMount:** Executed before rendering and is used for App level configuration in your root component.\n- **componentDidMount:** Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.\n- **componentWillReceiveProps:** Executed when particular prop updates to trigger state transitions.\n- **shouldComponentUpdate:** Determines if the component will be updated or not. By default it returns `true`. If you are sure that the component doesn't need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.\n- **componentWillUpdate:** Executed before re-rendering the component when there are props & state changes confirmed by `shouldComponentUpdate()` which returns true.\n- **componentDidUpdate:** Mostly it is used to update the DOM in response to prop or state changes.\n- **componentWillUnmount:** It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.\n\nReact 16.3+\n\n- **getDerivedStateFromProps:** Invoked right before calling `render()` and is invoked on _every_ render. This exists for rare use cases where you need a derived state. Worth reading [if you need derived state](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html).\n- **componentDidMount:** Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.\n- **shouldComponentUpdate:** Determines if the component will be updated or not. By default, it returns `true`. If you are sure that the component doesn't need to render after the state or props are updated, you can return a false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives a new prop.\n- **getSnapshotBeforeUpdate:** Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into `componentDidUpdate()`. This is useful to capture information from the DOM i.e. scroll position.\n- **componentDidUpdate:** Mostly it is used to update the DOM in response to prop or state changes. This will not fire if `shouldComponentUpdate()` returns `false`.\n- **componentWillUnmount** It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.\n\n\n", "code": ""}, {"question": "35.  What are Higher-Order Components?", "answer": "\nA _higher-order component_ (_HOC_) is a function that takes a component and returns a new component. Basically, it's a pattern that is derived from React's compositional nature.\n\nWe call them **pure components** because they can accept any dynamically provided child component but they won't modify or copy any behavior from their input components.\n\n\nHOC can be used for many use cases:\n\n1. Code reuse, logic and bootstrap abstraction.\n2. Render hijacking.\n3. State abstraction and manipulation.\n4. Props manipulation.\n\n\n", "code": "const EnhancedComponent = higherOrderComponent(WrappedComponent);\n"}, {"question": "36.  How to create props proxy for HOC component?", "answer": "\nYou can add/edit props passed to the component using _props proxy_ pattern like this:\n\n\n\n", "code": "function HOC(WrappedComponent) (\nreturn class Test extends Component (\nrender() (\nconst newProps = (\ntitle: \"New Header\",\nfooter: false,\nshowFeatureX: false,\nshowFeatureY: true,\n);\n\nreturn <WrappedComponent (...this.props) (...newProps) />;\n)\n);\n)\n"}, {"question": "37.  What is context?", "answer": "\n_Context_ provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nFor example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components.\n\n\n\n", "code": "const ( Provider, Consumer ) = React.createContext(defaultValue);\n"}, {"question": "38.  What is children prop?", "answer": "\n_Children_ is a prop (`this.props.children`) that allows you to pass components as data to other components, just like any other prop you use. Component tree put between component's opening and closing tag will be passed to that component as `children` prop.\n\nThere are several methods available in the React API to work with this prop. These include `React.Children.map`, `React.Children.forEach`, `React.Children.count`, `React.Children.only`, `React.Children.toArray`.\n\nA simple usage of children prop looks as below,\n\n\n\n", "code": "const MyDiv = React.createClass((\nrender: function () (\nreturn <div>(this.props.children)</div>;\n),\n));\n\nReactDOM.render(\n<MyDiv>\n<span>(\"Hello\")</span>\n<span>(\"World\")</span>\n</MyDiv>,\nnode\n);\n"}, {"question": "39.  How to write comments in React?", "answer": "\nThe comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.\n\n**Single-line comments:**\n\n\n**Multi-line comments:**\n\n\n\n", "code": "<div>\n(/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */)\n(`Welcome $(user), let's play React`)\n</div>\n<div>\n(/* Multi-line comments for more than\none line */)\n(`Welcome $(user), let's play React`)\n</div>\n"}, {"question": "40.  What is the purpose of using super constructor with props argument?", "answer": "\nA child class constructor cannot make use of `this` reference until the `super()` method has been called. The same applies to ES6 sub-classes as well. The main reason for passing props parameter to `super()` call is to access `this.props` in your child constructors.\n\n**Passing props:**\n\n\n**Not passing props:**\n\n\nThe above code snippets reveals that `this.props` is different only within the constructor. It would be the same outside the constructor.\n\n\n", "code": "class MyComponent extends React.Component (\nconstructor(props) (\nsuper(props);\n\nconsole.log(this.props); // prints ( name: 'John', age: 42 )\n)\n)\nclass MyComponent extends React.Component (\nconstructor(props) (\nsuper();\n\nconsole.log(this.props); // prints undefined\n\n// but props parameter is still available\nconsole.log(props); // prints ( name: 'John', age: 42 )\n)\n\nrender() (\n// no difference outside constructor\nconsole.log(this.props); // prints ( name: 'John', age: 42 )\n)\n)\n"}, {"question": "41.  What is reconciliation?", "answer": "\n`Reconciliation` is the process through which React updates the Browser DOM and makes React work faster. React use a `diffing algorithm` so that component updates are predictable and faster. React would first calculate the difference between the `real DOM` and the copy of DOM `(Virtual DOM)` when there's an update of components.\nReact stores a copy of Browser DOM which is called `Virtual DOM`. When we make changes or add data, React creates a new Virtual DOM and compares it with the previous one. This comparison is done by `Diffing Algorithm`.\nNow React compares the Virtual DOM with Real DOM. It finds out the changed nodes and updates only the changed nodes in Real DOM leaving the rest nodes as it is. This process is called _Reconciliation_.\n\n\n", "code": ""}, {"question": "42.  How to set state with a dynamic key name?", "answer": "\nIf you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with _computed property names_.\n\n\n\n", "code": "handleInputChange(event) (\nthis.setState(( [event.target.id]: event.target.value ))\n)\n"}, {"question": "43.  What would be the common mistake of function being called every time the component renders?", "answer": "\nYou need to make sure that function is not being called while passing the function as a parameter.\n\n\nInstead, pass the function itself without parenthesis:\n\n\n\n", "code": "render() (\n// Wrong: handleClick is called instead of passed as a reference!\nreturn <button onClick=(this.handleClick())>('Click Me')</button>\n)\nrender() (\n// Correct: handleClick is passed as a reference!\nreturn <button onClick=(this.handleClick)>('Click Me')</button>\n)\n"}, {"question": "44.  Is lazy function supports named exports?", "answer": "\nNo, currently `React.lazy` function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don\u2019t pull unused components.\nLet's take a component file which exports multiple named components,\n\n\nand reexport `MoreComponents.js` components in an intermediate file `IntermediateComponent.js`\n\n\nNow you can import the module using lazy function as below,\n\n\n\n", "code": "// MoreComponents.js\nexport const SomeComponent = /* ... */;\nexport const UnusedComponent = /* ... */;\n// IntermediateComponent.js\nexport ( SomeComponent as default ) from \"./MoreComponents.js\";\nimport React, ( lazy ) from \"react\";\nconst SomeComponent = lazy(() => import(\"./IntermediateComponent.js\"));\n"}, {"question": "45.  Why React uses `className` over `class` attribute?", "answer": "\nThe attribute `class` is a keyword in JavaScript, and JSX is an extension of JavaScript. That's the principal reason why React uses `className` instead of `class`. Pass a string as the `className` prop.\n\n\n\n", "code": "render() (\nreturn <span className=('menu navigation-menu')>('Menu')</span>\n)\n"}, {"question": "46.  What are fragments?", "answer": "\nIt's a common pattern or practice in React for a component to return multiple elements. _Fragments_ let you group a list of children without adding extra nodes to the DOM.\nYou need to use either **<Fragment>** or a shorter syntax having empty tag (**<></>**).\n\nBelow is the example of how to use fragment inside _Story_ component.\n\nIt is also possible to render list of fragments inside a loop with the mandatory **key** attribute supplied.\n\n\nUsusally you don't need to use **<Fragment>** until unless there is a need of _key_ attribute. The usage of shorter syntax looks like below.\n\n\n\n", "code": "function Story((title, description, date)) (\nreturn (\n<Fragment>\n<h2>(title)</h2>\n<p>(description)</p>\n<p>(date)</p>\n</Fragment>\n);\n)\nfunction StoryBook() (\nreturn stories.map(story =>\n<Fragment key=( story.id)>\n<h2>(story.title)</h2>\n<p>(story.description)</p>\n<p>(story.date)</p>\n</Fragment>\n);\n)\nfunction Story((title, description, date)) (\nreturn (\n<>\n<h2>(title)</h2>\n<p>(description)</p>\n<p>(date)</p>\n</>\n);\n)\n"}, {"question": "47.  Why fragments are better than container divs?", "answer": "\nBelow are the list of reasons to prefer fragments over container DOM elements,\n\n1. Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.\n2. Some CSS mechanisms like _Flexbox_ and _CSS Grid_ have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.\n3. The DOM Inspector is less cluttered.\n\n\n", "code": ""}, {"question": "48.  What are portals in React?", "answer": "\n_Portal_ is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n\n\nThe first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.\n\n\n", "code": "ReactDOM.createPortal(child, container);\n"}, {"question": "49.  What are stateless components?", "answer": "\nIf the behaviour of a component is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the `this` keyword altogether.\n\n\n", "code": ""}, {"question": "50.  What are stateful components?", "answer": "\nIf the behaviour of a component is dependent on the _state_ of the component then it can be termed as stateful component. These _stateful components_ are either function components with hooks or _class components_.\n\nLet's take an example of function stateful component which update the state based on click event,\n\n<details><summary><b>See Class</b></summary>\n<p>\nThe equivalent class stateful component with a state that gets initialized in the `constructor`.\n\n</p>\n</details>\n\n\n\n", "code": "import React, (useState) from 'react';\n\nconst App = (props) => (\nconst [count, setCount] = useState(0);\nhandleIncrement() (\nsetCount(count+1);\n)\n\nreturn (\n<>\n<button onClick=(handleIncrement)>Increment</button>\n<span>Counter: (count)</span>\n</>\n)\n)\nclass App extends Component (\nconstructor(props) (\nsuper(props);\nthis.state = ( count: 0 );\n)\n\nhandleIncrement() (\nsetState((count: this.state.count + 1))\n)\n\nrender() (\n<>\n<button onClick=(() => this.handleIncrement)>Increment</button>\n<span>Count: (count)</span>\n</>\n)\n)\n"}, {"question": "51.  How to apply validation on props in React?", "answer": "\nWhen the application is running in _development mode_, React will automatically check all props that we set on components to make sure they have _correct type_. If the type is incorrect, React will generate warning messages in the console. It's disabled in _production mode_ due to performance impact. The mandatory props are defined with `isRequired`.\n\nThe set of predefined prop types:\n\n1. `PropTypes.number`\n2. `PropTypes.string`\n3. `PropTypes.array`\n4. `PropTypes.object`\n5. `PropTypes.func`\n6. `PropTypes.node`\n7. `PropTypes.element`\n8. `PropTypes.bool`\n9. `PropTypes.symbol`\n10. `PropTypes.any`\n\nWe can define `propTypes` for `User` component as below:\n\n\n**Note:** In React v15.5 _PropTypes_ were moved from `React.PropTypes` to `prop-types` library.\n\n_The Equivalent Functional Component_\n\n\n\n", "code": "import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass User extends React.Component (\nstatic propTypes = (\nname: PropTypes.string.isRequired,\nage: PropTypes.number.isRequired,\n);\n\nrender() (\nreturn (\n<>\n<h1>(`Welcome, $(this.props.name)`)</h1>\n<h2>(`Age, $(this.props.age)`)</h2>\n</>\n);\n)\n)\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction User(( name, age )) (\nreturn (\n<>\n<h1>(`Welcome, $(name)`)</h1>\n<h2>(`Age, $(age)`)</h2>\n</>\n);\n)\n\nUser.propTypes = (\nname: PropTypes.string.isRequired,\nage: PropTypes.number.isRequired,\n);\n"}, {"question": "52.  What are the advantages of React?", "answer": "\nBelow are the list of main advantages of React,\n\n1. Increases the application's performance with _Virtual DOM_.\n2. JSX makes code easy to read and write.\n3. It renders both on client and server side (_SSR_).\n4. Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.\n5. Easy to write unit and integration tests with tools such as Jest.\n\n\n", "code": ""}, {"question": "53.  What are the limitations of React?", "answer": "\nApart from the advantages, there are few limitations of React too,\n\n1. React is just a view library, not a full framework.\n2. There is a learning curve for beginners who are new to web development.\n3. Integrating React into a traditional MVC framework requires some additional configuration.\n4. The code complexity increases with inline templating and JSX.\n5. Too many smaller components leading to over engineering or boilerplate.\n\n\n", "code": ""}, {"question": "54.  What are error boundaries in React v16?", "answer": "\n_Error boundaries_ are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.\n\nA class component becomes an error boundary if it defines a new lifecycle method called `componentDidCatch(error, info)` or `static getDerivedStateFromError() `:\n\n\nAfter that use it as a regular component:\n\n\n\n", "code": "class ErrorBoundary extends React.Component (\nconstructor(props) (\nsuper(props);\nthis.state = ( hasError: false );\n)\n\ncomponentDidCatch(error, info) (\n// You can also log the error to an error reporting service\nlogErrorToMyService(error, info);\n)\n\nstatic getDerivedStateFromError(error) (\n// Update state so the next render will show the fallback UI.\nreturn ( hasError: true );\n)\n\nrender() (\nif (this.state.hasError) (\n// You can render any custom fallback UI\nreturn <h1>(\"Something went wrong.\")</h1>;\n)\nreturn this.props.children;\n)\n)\n<ErrorBoundary>\n<MyWidget />\n</ErrorBoundary>\n"}, {"question": "55.  How are error boundaries handled in React v15?", "answer": "\nReact v15 provided very basic support for _error boundaries_ using `unstable_handleError` method. It has been renamed to `componentDidCatch` in React v16.\n\n\n", "code": ""}, {"question": "56.  What are the recommended ways for static type checking?", "answer": "\nNormally we use _PropTypes library_ (`React.PropTypes` moved to a `prop-types` package since React v15.5) for _type checking_ in the React applications. For large code bases, it is recommended to use _static type checkers_ such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.\n\n\n", "code": ""}, {"question": "57.  What is the use of `react-dom` package?", "answer": "\nThe `react-dom` package provides _DOM-specific methods_ that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:\n\n1. `render()`\n2. `hydrate()`\n3. `unmountComponentAtNode()`\n4. `findDOMNode()`\n5. `createPortal()`\n\n\n", "code": ""}, {"question": "58.  What is the purpose of render method of `react-dom`?", "answer": "\nThis method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.\n\n\nIf the optional callback is provided, it will be executed after the component is rendered or updated.\n\n\n", "code": "ReactDOM.render(element, container, [callback])\n"}, {"question": "59.  What is ReactDOMServer?", "answer": "\nThe `ReactDOMServer` object enables you to render components to static markup (typically used on node server). This object is mainly used for _server-side rendering_ (SSR). The following methods can be used in both the server and browser environments:\n\n1. `renderToString()`\n2. `renderToStaticMarkup()`\n\nFor example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call `renderToString` to render your root component to a string, which you then send as response.\n\n\n\n", "code": "// using Express\nimport ( renderToString ) from \"react-dom/server\";\nimport MyPage from \"./MyPage\";\n\napp.get(\"/\", (req, res) => (\nres.write(\n\"<!DOCTYPE html><html><head><title>My Page</title></head><body>\"\n);\nres.write('<div id=\"content\">');\nres.write(renderToString(<MyPage />));\nres.write(\"</div></body></html>\");\nres.end();\n));\n"}, {"question": "60.  How to use innerHTML in React?", "answer": "\nThe `dangerouslySetInnerHTML` attribute is React's replacement for using `innerHTML` in the browser DOM. Just like `innerHTML`, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a `__html` object as key and HTML text as value.\n\nIn this example MyComponent uses `dangerouslySetInnerHTML` attribute for setting HTML markup:\n\n\n\n", "code": "function createMarkup() (\nreturn ( __html: \"First &middot; Second\" );\n)\n\nfunction MyComponent() (\nreturn <div dangerouslySetInnerHTML=(createMarkup()) />;\n)\n"}, {"question": "61.  How to use styles in React?", "answer": "\nThe `style` attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.\n\n\nStyle keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. `node.style.backgroundImage`).\n\n\n", "code": "const divStyle = (\ncolor: \"blue\",\nbackgroundImage: \"url(\" + imgUrl + \")\",\n);\n\nfunction HelloWorldComponent() (\nreturn <div style=(divStyle)>Hello World!</div>;\n)\n"}, {"question": "62.  How events are different in React?", "answer": "\nHandling events in React elements has some syntactic differences:\n\n1. React event handlers are named using camelCase, rather than lowercase.\n2. With JSX you pass a function as the event handler, rather than a string.\n\n\n", "code": ""}, {"question": "63.  What will happen if you use `setState()` in constructor?", "answer": "\nWhen you use `setState()`, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: _Can only update a mounted or mounting component._ So we need to use `this.state` to initialize variables inside constructor.\n\n\n", "code": ""}, {"question": "64.  What is the impact of indexes as keys?", "answer": "\nKeys should be stable, predictable, and unique so that React can keep track of elements.\n\nIn the below code snippet each element's key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.\n\n\nIf you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.\n\n\n\n", "code": "(\ntodos.map((todo, index) => <Todo (...todo) key=(index) />);\n)\n(\ntodos.map((todo) => <Todo (...todo) key=(todo.id) />);\n)\n"}, {"question": "65.  Is it good to use `setState()` in `componentWillMount()` method?", "answer": "\nYes, it is safe to use `setState()` inside `componentWillMount()` method. But at the same it is recommended to avoid async initialization in `componentWillMount()` lifecycle method. `componentWillMount()` is invoked immediately before mounting occurs. It is called before `render()`, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in `componentDidMount()` instead of `componentWillMount()`.\n\n\n\n", "code": "componentDidMount() (\naxios.get(`api/todos`)\n.then((result) => (\nthis.setState((\nmessages: [...result.data]\n))\n))\n)\n"}, {"question": "66.  What will happen if you use props in initial state?", "answer": "\nIf the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.\n\nThe below component won't display the updated input value:\n\n\nUsing props inside render method will update the value:\n\n\n\n", "code": "class MyComponent extends React.Component (\nconstructor(props) (\nsuper(props);\n\nthis.state = (\nrecords: [],\ninputValue: this.props.inputValue,\n);\n)\n\nrender() (\nreturn <div>(this.state.inputValue)</div>;\n)\n)\nclass MyComponent extends React.Component (\nconstructor(props) (\nsuper(props);\n\nthis.state = (\nrecord: [],\n);\n)\n\nrender() (\nreturn <div>(this.props.inputValue)</div>;\n)\n)\n"}, {"question": "67.  How do you conditionally render components?", "answer": "\nIn some cases you want to render different components depending on some state. JSX does not render `false` or `undefined`, so you can use conditional _short-circuiting_ to render a given part of your component only if a certain condition is true.\n\n\nIf you need an `if-else` condition then use _ternary operator_.\n\n\n\n", "code": "const MyComponent = (( name, address )) => (\n<div>\n<h2>(name)</h2>\n(address && <p>(address)</p>)\n</div>\n);\nconst MyComponent = (( name, address )) => (\n<div>\n<h2>(name)</h2>\n(address ? <p>(address)</p> : <p>(\"Address is not available\")</p>)\n</div>\n);\n"}, {"question": "68.  Why we need to be careful when spreading props on DOM elements?", "answer": "\nWhen we _spread props_ we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with `...rest` operator, so it will add only required props.\n\nFor example,\n\n\n\n", "code": "const ComponentA = () => (\n<ComponentB isDisplay=(true) className=(\"componentStyle\") />\n);\n\nconst ComponentB = (( isDisplay, ...domProps )) => (\n<div (...domProps)>(\"ComponentB\")</div>\n);\n"}, {"question": "69.  How you use decorators in React?", "answer": "\nYou can _decorate_ your _class_ components, which is the same as passing the component into a function. **Decorators** are flexible and readable way of modifying component functionality.\n\n\n**Note:** Decorators are a feature that didn't make it into ES7, but are currently a _stage 2 proposal_.\n\n\n", "code": "@setTitle(\"Profile\")\nclass Profile extends React.Component (\n//....\n)\n\n/*\ntitle is a string that will be set as a document title\nWrappedComponent is what our decorator will receive when\nput directly above a component class as seen in the example above\n*/\nconst setTitle = (title) => (WrappedComponent) => (\nreturn class extends React.Component (\ncomponentDidMount() (\ndocument.title = title;\n)\n\nrender() (\nreturn <WrappedComponent (...this.props) />;\n)\n);\n);\n"}, {"question": "70.  How do you memoize a component?", "answer": "\nThere are memoize libraries available which can be used on function components.\n\nFor example `moize` library can memoize the component in another component.\n\n\n**Update:** Since React v16.6.0, we have a `React.memo`. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.\n\n\n\n", "code": "import moize from \"moize\";\nimport Component from \"./components/Component\"; // this module exports a non-memoized component\n\nconst MemoizedFoo = moize.react(Component);\n\nconst Consumer = () => (\n<div>\n(\"I will memoize the following entry:\")\n<MemoizedFoo />\n</div>;\n);\nconst MemoComponent = React.memo(function MemoComponent(props) (\n/* render using props */\n));\nOR;\nexport default React.memo(MyFunctionComponent);\n"}, {"question": "71.  How you implement Server Side Rendering or SSR?", "answer": "\nReact is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.\n\n\nThis method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.\n\n\n", "code": "import ReactDOMServer from \"react-dom/server\";\nimport App from \"./App\";\n\nReactDOMServer.renderToString(<App />);\n"}, {"question": "72.  How to enable production mode in React?", "answer": "\nYou should use Webpack's `DefinePlugin` method to set `NODE_ENV` to `production`, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify's dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.\n\n\n", "code": ""}, {"question": "73.  What is CRA and its benefits?", "answer": "\nThe `create-react-app` CLI tool allows you to quickly create & run React applications with no configuration step.\n\nLet's create Todo App using _CRA_:\n\n\nIt includes everything we need to build a React app:\n\n1. React, JSX, ES6, and Flow syntax support.\n2. Language extras beyond ES6 like the object spread operator.\n3. Autoprefixed CSS, so you don\u2019t need -webkit- or other prefixes.\n4. A fast interactive unit test runner with built-in support for coverage reporting.\n5. A live development server that warns about common mistakes.\n6. A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.\n\n\n", "code": "# Installation\n$ npm install -g create-react-app\n\n# Create new project\n$ create-react-app todo-app\n$ cd todo-app\n\n# Build, test and run\n$ npm run build\n$ npm run test\n$ npm start\n"}, {"question": "74.  What is the lifecycle methods order in mounting?", "answer": "\nThe lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.\n\n1. `constructor()`\n2. `static getDerivedStateFromProps()`\n3. `render()`\n4. `componentDidMount()`\n\n\n", "code": ""}, {"question": "75.  What are the lifecycle methods going to be deprecated in React v16?", "answer": "\nThe following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.\n\n1. `componentWillMount()`\n2. `componentWillReceiveProps()`\n3. `componentWillUpdate()`\n\nStarting with React v16.3 these methods are aliased with `UNSAFE_` prefix, and the unprefixed version will be removed in React v17.\n\n\n", "code": ""}, {"question": "76.  What is the purpose of `getDerivedStateFromProps()` lifecycle method?", "answer": "\nThe new static `getDerivedStateFromProps()` lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or `null` to indicate that the new props do not require any state updates.\n\n\nThis lifecycle method along with `componentDidUpdate()` covers all the use cases of `componentWillReceiveProps()`.\n\n\n", "code": "class MyComponent extends React.Component (\nstatic getDerivedStateFromProps(props, state) (\n// ...\n)\n)\n"}, {"question": "77.  What is the purpose of `getSnapshotBeforeUpdate()` lifecycle method?", "answer": "\nThe new `getSnapshotBeforeUpdate()` lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to `componentDidUpdate()`.\n\n\nThis lifecycle method along with `componentDidUpdate()` covers all the use cases of `componentWillUpdate()`.\n\n\n", "code": "class MyComponent extends React.Component (\ngetSnapshotBeforeUpdate(prevProps, prevState) (\n// ...\n)\n)\n"}, {"question": "78.  Do Hooks replace render props and higher order components?", "answer": "\nBoth render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.\n\n\n", "code": ""}, {"question": "79.  What is the recommended way for naming components?", "answer": "\nIt is recommended to name the component by reference instead of using `displayName`.\n\nUsing `displayName` for naming component:\n\n\nThe **recommended** approach:\n\n\nalso\n\n\n\n", "code": "export default React.createClass((\ndisplayName: \"TodoApp\",\n// ...\n));\nexport default class TodoApp extends React.Component (\n// ...\n)\nconst TodoApp = () => (\n//...\n);\nexport default TodoApp;\n"}, {"question": "80.  What is the recommended ordering of methods in component class?", "answer": "\n_Recommended_ ordering of methods from _mounting_ to _render stage_:\n\n1. `static` methods\n2. `constructor()`\n3. `getChildContext()`\n4. `componentWillMount()`\n5. `componentDidMount()`\n6. `componentWillReceiveProps()`\n7. `shouldComponentUpdate()`\n8. `componentWillUpdate()`\n9. `componentDidUpdate()`\n10. `componentWillUnmount()`\n11. click handlers or event handlers like `onClickSubmit()` or `onChangeDescription()`\n12. getter methods for render like `getSelectReason()` or `getFooterContent()`\n13. optional render methods like `renderNavigation()` or `renderProfilePicture()`\n14. `render()`\n\n\n", "code": ""}, {"question": "81.  What is a switching component?", "answer": "\nA _switching component_ is a component that renders one of many components. We need to use object to map prop values to components.\n\nFor example, a switching component to display different pages based on `page` prop:\n\n\n\n", "code": "import HomePage from \"./HomePage\";\nimport AboutPage from \"./AboutPage\";\nimport ServicesPage from \"./ServicesPage\";\nimport ContactPage from \"./ContactPage\";\n\nconst PAGES = (\nhome: HomePage,\nabout: AboutPage,\nservices: ServicesPage,\ncontact: ContactPage,\n);\n\nconst Page = (props) => (\nconst Handler = PAGES[props.page] || ContactPage;\n\nreturn <Handler (...props) />;\n);\n\n// The keys of the PAGES object can be used in the prop types to catch dev-time errors.\nPage.propTypes = (\npage: PropTypes.oneOf(Object.keys(PAGES)).isRequired,\n);\n"}, {"question": "82.  Why we need to pass a function to setState()?", "answer": "\nThe reason behind for this is that `setState()` is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after `setState()` is called. That means you should not rely on the current state when calling `setState()`\u200asince you can't be sure what that state will be. The solution is to pass a function to `setState()`, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of `setState()`.\n\nLet's say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.\n\n\nIf we pass a function to `setState()`, the count gets incremented correctly.\n\n\n**(OR)**\n\n### Why function is preferred over object for `setState()`?\n\nReact may batch multiple `setState()` calls into a single update for performance. Because `this.props` and `this.state` may be updated asynchronously, you should not rely on their values for calculating the next state.\n\nThis counter example will fail to update as expected:\n\n\nThe preferred approach is to call `setState()` with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.\n\n\n\n", "code": "// assuming this.state.count === 0\nthis.setState(( count: this.state.count + 1 ));\nthis.setState(( count: this.state.count + 1 ));\nthis.setState(( count: this.state.count + 1 ));\n// this.state.count === 1, not 3\nthis.setState((prevState, props) => ((\ncount: prevState.count + props.increment,\n)));\n// this.state.count === 3 as expected\n// Wrong\nthis.setState((\ncounter: this.state.counter + this.props.increment,\n));\n// Correct\nthis.setState((prevState, props) => ((\ncounter: prevState.counter + props.increment,\n)));\n"}, {"question": "84.  What are React Mixins?", "answer": "\n_Mixins_ are a way to totally separate components to have a common functionality. Mixins **should not be used** and can be replaced with _higher-order components_ or _decorators_.\n\nOne of the most commonly used mixins is `PureRenderMixin`. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:\n\n\n<!-- TODO: mixins are deprecated -->\n\n\n", "code": "const PureRenderMixin = require(\"react-addons-pure-render-mixin\");\n\nconst Button = React.createClass((\nmixins: [PureRenderMixin],\n// ...\n));\n"}, {"question": "85.  Why is `isMounted()` an anti-pattern and what is the proper solution?", "answer": "\nThe primary use case for `isMounted()` is to avoid calling `setState()` after a component has been unmounted, because it will emit a warning.\n\n\nChecking `isMounted()` before calling `setState()` does eliminate the warning, but it also defeats the purpose of the warning. Using `isMounted()` is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.\n\nAn optimal solution would be to find places where `setState()` might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in `componentWillUnmount()`, prior to unmounting.\n\n\n", "code": "if (this.isMounted()) (\nthis.setState((...))\n)\n"}, {"question": "86.  What are the Pointer Events supported in React?", "answer": "\n_Pointer Events_ provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don't correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the _Pointer Events_ specification.\n\nThe following event types are now available in _React DOM_:\n\n1. `onPointerDown`\n2. `onPointerMove`\n3. `onPointerUp`\n4. `onPointerCancel`\n5. `onGotPointerCapture`\n6. `onLostPointerCapture`\n7. `onPointerEnter`\n8. `onPointerLeave`\n9. `onPointerOver`\n10. `onPointerOut`\n\n\n", "code": ""}, {"question": "87.  Why should component names start with capital letter?", "answer": "\nIf you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as an unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.\n\n\nYou can define component class which name starts with lowercase letter, but when it's imported it should have capital letter. Here lowercase is fine:\n\n\nWhile when imported in another file it should start with capital letter:\n\n\n#### What are the exceptions on React component naming?\n\nThe component names should start with an uppercase letter but there are few exceptions to this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names.\nFor example, the below tag can be compiled to a valid component,\n\n\n\n", "code": "class SomeComponent extends Component (\n// Code goes here\n)\nclass myComponent extends Component (\nrender() (\nreturn <div />;\n)\n)\n\nexport default myComponent;\nimport MyComponent from \"./myComponent\";\nrender() (\nreturn (\n<obj.component/> // `React.createElement(obj.component)`\n)\n)\n"}, {"question": "88.  Are custom DOM attributes supported in React v16?", "answer": "\nYes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn't recognize, React would just skip it.\n\nFor example, let's take a look at the below attribute:\n\n\nWould render an empty div to the DOM with React v15:\n\n\nIn React v16 any unknown attributes will end up in the DOM:\n\n\nThis is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.\n\n\n", "code": "<div mycustomattribute=(\"something\") />\n<div />\n<div mycustomattribute=\"something\" />\n"}, {"question": "89.  What is the difference between constructor and getInitialState?", "answer": "\nYou should initialize state in the constructor when using ES6 classes, and `getInitialState()` method when using `React.createClass()`.\n\n**Using ES6 classes:**\n\n\n**Using `React.createClass()`:**\n\n\n**Note:** `React.createClass()` is deprecated and removed in React v16. Use plain JavaScript classes instead.\n\n\n", "code": "class MyComponent extends React.Component (\nconstructor(props) (\nsuper(props);\nthis.state = (\n/* initial state */\n);\n)\n)\nconst MyComponent = React.createClass((\ngetInitialState() (\nreturn (\n/* initial state */\n);\n),\n));\n"}, {"question": "90.  Can you force a component to re-render without calling setState?", "answer": "\nBy default, when your component's state or props change, your component will re-render. If your `render()` method depends on some other data, you can tell React that the component needs re-rendering by calling `forceUpdate()`.\n\n\nIt is recommended to avoid all uses of `forceUpdate()` and only read from `this.props` and `this.state` in `render()`.\n\n\n", "code": "component.forceUpdate(callback);\n"}, {"question": "91.  What is the difference between `super()` and `super(props)` in React using ES6 classes?", "answer": "\nWhen you want to access `this.props` in `constructor()` then you should pass props to `super()` method.\n\n**Using `super(props)`:**\n\n\n**Using `super()`:**\n\n\nOutside `constructor()` both will display same value for `this.props`.\n\n\n", "code": "class MyComponent extends React.Component (\nconstructor(props) (\nsuper(props);\nconsole.log(this.props); // ( name: 'John', ... )\n)\n)\nclass MyComponent extends React.Component (\nconstructor(props) (\nsuper();\nconsole.log(this.props); // undefined\n)\n)\n"}, {"question": "92.  How to loop inside JSX?", "answer": "\nYou can simply use `Array.prototype.map` with ES6 _arrow function_ syntax.\n\nFor example, the `items` array of objects is mapped into an array of components:\n\n\nBut you can't iterate using `for` loop:\n\n\nThis is because JSX tags are transpiled into _function calls_, and you can't use statements inside expressions. This may change thanks to `do` expressions which are _stage 1 proposal_.\n\n\n", "code": "<tbody>\n(items.map((item) => (\n<SomeComponent key=(item.id) name=(item.name) />\n)))\n</tbody>\n<tbody>\nfor (let i = 0; i < items.length; i++) (\n<SomeComponent key=(items[i].id) name=(items[i].name) />\n)\n</tbody>\n"}, {"question": "93.  How do you access props in attribute quotes?", "answer": "\nReact (or JSX) doesn't support variable interpolation inside an attribute value. The below representation won't work:\n\n\nBut you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:\n\n\nUsing _template strings_ will also work:\n\n\n\n", "code": "<img className=\"image\" src=\"images/(this.props.image)\" />\n<img className=\"image\" src=(\"images/\" + this.props.image) />\n<img className=\"image\" src=(`images/$(this.props.image)`) />\n"}, {"question": "94.  What is React proptype array with shape?", "answer": "\nIf you want to pass an array of objects to a component with a particular shape then use `React.PropTypes.shape()` as an argument to `React.PropTypes.arrayOf()`.\n\n\n\n", "code": "ReactComponent.propTypes = (\narrayWithShape: React.PropTypes.arrayOf(\nReact.PropTypes.shape((\ncolor: React.PropTypes.string.isRequired,\nfontSize: React.PropTypes.number.isRequired,\n))\n).isRequired,\n);\n"}, {"question": "95.  How to conditionally apply class attributes?", "answer": "\nYou shouldn't use curly braces inside quotes because it is going to be evaluated as a string.\n\n\nInstead you need to move curly braces outside (don't forget to include spaces between class names):\n\n\n_Template strings_ will also work:\n\n\n\n", "code": "<div className=\"btn-panel (this.props.visible ? 'show' : 'hidden')\">\n<div className=('btn-panel ' + (this.props.visible ? 'show' : 'hidden'))>\n<div className=(`btn-panel $(this.props.visible ? 'show' : 'hidden')`)>\n"}, {"question": "96.  What is the difference between React and ReactDOM?", "answer": "\nThe `react` package contains `React.createElement()`, `React.Component`, `React.Children`, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The `react-dom` package contains `ReactDOM.render()`, and in `react-dom/server` we have _server-side rendering_ support with `ReactDOMServer.renderToString()` and `ReactDOMServer.renderToStaticMarkup()`.\n\n\n", "code": ""}, {"question": "97.  Why ReactDOM is separated from React?", "answer": "\nThe React team worked on extracting all DOM-related features into a separate library called _ReactDOM_. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, `react-native`, `react-art`, `react-canvas`, and `react-three`, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.\n\nTo build more environments that React can render to, React team planned to split the main React package into two: `react` and `react-dom`. This paves the way to writing components that can be shared between the web version of React and React Native.\n\n\n", "code": ""}, {"question": "98.  How to use React label element?", "answer": "\nIf you try to render a `<label>` element bound to a text input using the standard `for` attribute, then it produces HTML missing that attribute and prints a warning to the console.\n\n\nSince `for` is a reserved keyword in JavaScript, use `htmlFor` instead.\n\n\n\n", "code": "<label for=('user')>('User')</label>\n<input type=('text') id=('user') />\n<label htmlFor=('user')>('User')</label>\n<input type=('text') id=('user') />\n"}, {"question": "99.  How to combine multiple inline style objects?", "answer": "\nYou can use _spread operator_ in regular React:\n\n\nIf you're using React Native then you can use the array notation:\n\n\n\n", "code": "<button style=(( ...styles.panel.button, ...styles.panel.submitButton ))>\n(\"Submit\")\n</button>\n<button style=([styles.panel.button, styles.panel.submitButton])>\n(\"Submit\")\n</button>\n"}, {"question": "100.   How to re-render the view when the browser is resized?", "answer": "\nYou can use the `useState` hook to manage the width and height state variables, and the `useEffect` hook to add and remove the `resize` event listener. The `[]` dependency array passed to useEffect ensures that the effect only runs once (on mount) and not on every re-render.\n\n<details>\n<summary><h4>Using Class Component</h4></summary>\n\nYou can listen to the `resize` event in `componentDidMount()` and then update the dimensions (`width` and `height`). You should remove the listener in `componentWillUnmount()` method.\n\n</details>\n\n\n", "code": "import React, ( useState, useEffect ) from \"react\";\nfunction WindowDimensions() (\nconst [dimensions, setDimensions] = useState((\nwidth: window.innerWidth,\nheight: window.innerHeight,\n));\n\nuseEffect(() => (\nfunction handleResize() (\nsetDimensions((\nwidth: window.innerWidth,\nheight: window.innerHeight,\n));\n)\nwindow.addEventListener(\"resize\", handleResize);\nreturn () => window.removeEventListener(\"resize\", handleResize);\n), []);\n\nreturn (\n<span>\n(dimensions.width) x (dimensions.height)\n</span>\n);\n)\nclass WindowDimensions extends React.Component (\nconstructor(props) (\nsuper(props);\nthis.updateDimensions = this.updateDimensions.bind(this);\n)\n\ncomponentWillMount() (\nthis.updateDimensions();\n)\n\ncomponentDidMount() (\nwindow.addEventListener(\"resize\", this.updateDimensions);\n)\n\ncomponentWillUnmount() (\nwindow.removeEventListener(\"resize\", this.updateDimensions);\n)\n\nupdateDimensions() (\nthis.setState((\nwidth: window.innerWidth,\nheight: window.innerHeight,\n));\n)\n\nrender() (\nreturn (\n<span>\n(this.state.width) x (this.state.height)\n</span>\n);\n)\n)\n"}]
